#!/bin/bash
#insomnia-lite
#An application that will remind you when to go to bed based on your
#wake up time and the optimal sleep times algorithm.
#Version 1.0.0
wakeUpTime="08:30"
#declare -a sleepTimes


function help()
{
  echo "NAME: insomnia-lite"
  echo "Usage: "
  echo "    [-t] (tests notification)"
  echo "    [-s wakeUpTime] wakeuptime 24 hour time zeros necessary ex. 08:05 (sets new wakeuptime)"
  echo "    [-h] (brings up the help page)"
}

function showRestNotification()
{
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
      notify-send "Insomnia" "Time to take a rest"  -u critical -t 7000 -i sleep.ico

  elif [[ "$OSTYPE" == "darwin"* ]]; then
      terminal-notifier -title "Insomnia" -message "Time to take a rest"  -sound "default"  -group rest -timeout 7 -appIcon sleep.png
  fi
}
function generateSleepTimes()
{

  oldIFS=$IFS
  IFS=: splitTime=(${wakeUpTime##*-})
  wakeUpHours=${splitTime[0]}
  wakeUpMinutes=${splitTime[1]}

  if [[ "$OSTYPE" == "linux-gnu" ]]; then
         currentHours=$(date +'%H')
         currentMinutes=$(date +'%M')
  elif [[ "$OSTYPE" == "darwin"* ]]; then
          currentHours=$(gdate +'%H')
          currentMinutes=$(gdate +'%M')
  fi


  if [[ $wakeUpHours < $currentHours ]]; then
        IFS=$oldIFS
        wakeUpTime="$wakeUpTime tomorrow"

  elif [[ "$wakeUpHours" == "$currentHours" && $wakeUpMinutes < $currentMinutes ]]; then
        IFS=$oldIFS
        wakeUpTime="$wakeUpTime tomorrow"

  else
        IFS=$oldIFS

        wakeUpTime="$wakeUpTime today"

  fi

  if [[ "$OSTYPE" == "linux-gnu" ]]; then
          tempTime=$(date -d "$wakeUpTime - 15 minutes" +"%D %H:%M")

  elif [[ "$OSTYPE" == "darwin"* ]]; then
          tempTime=$(gdate -d "$wakeUpTime - 15 minutes" +"%D %H:%M")
  fi

  if [[ "$OSTYPE" == "linux-gnu" ]]; then
          sleepTimes[6]=$(date -d "$tempTime" +"%D %H:%M")

  elif [[ "$OSTYPE" == "darwin"* ]]; then
          sleepTimes[6]=$(gdate -d "$tempTime" +"%D %H:%M")
  fi

  for i in {5..0}
  do
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
            sleepTimes[$i]=$(date -d "${sleepTimes[$i+1]} - 1 hour 30 minutes" +"%D %H:%M")

    elif [[ "$OSTYPE" == "darwin"* ]]; then
            sleepTimes[$i]=$(gdate -d "${sleepTimes[$i+1]} - 1 hour 30 minutes" +"%D %H:%M")

    fi
  done


  for i in {5..0}
  do
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
            sleepTimes[$i]=$(date -d "${sleepTimes[$i]}" +"%Y%m%d%H%M")

    elif [[ "$OSTYPE" == "darwin"* ]]; then
            sleepTimes[$i]=$(gdate -d "${sleepTimes[$i]}" +"%Y%m%d%H%M")
    fi
  done
  echo "${sleepTimes[@]}"
  echo
  echo
}

function removeNotificatonJobs()
{
  for i in `atq | awk '{print $1}'`;do atrm $i;done
  echo "Old Noitifications removed"
}

function setUpNotificationJobs()
{
  removeNotificatonJobs
  echo
  for i in {0..5}
  do
    at -f noti.sh -t ${sleepTimes[$i]} 
  done
  echo
  echo "New Notications set"
}


if [[ $# == 0 ]]; then
  help
  exit 0
fi



while getopts ":rhts::" opt; do
  case $opt in
    s)
      if [[ $# -gt 2 ]]; then
        echo "Option -s only accepts one argument" <&2
        exit 1
      fi
      wakeUpTime=$OPTARG
      generateSleepTimes
      setUpNotificationJobs
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    t)
      showRestNotification
    ;;
    h)
      help
    ;;
    r)
      removeNotificatonJobs
    ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done
